version: "3.9"
name: "hunters2"

services:
  register-service:
    container_name: "register-service"
    build:
      context: RegisterService
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    networks:
      - hunters-game-network
    depends_on:
      postgresql:
        condition: service_healthy

  login-service:
    container_name: "login-service"
    build:
      context: LoginService
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    networks:
      - hunters-game-network
    depends_on:
      postgresql:
        condition: service_healthy

  validation-service1:
    container_name: "validation-service1"
    build:
      context: ValidationService
      dockerfile: Dockerfile
    ports:
      - "8082:8080"
    networks:
      - hunters-game-network
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      - SERVICE_ID=1

  validation-service2:
    container_name: "validation-service2"
    build:
      context: ValidationService
      dockerfile: Dockerfile
    ports:
      - "8082:8080"
    networks:
      - hunters-game-network
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      - SERVICE_ID=2

  validation-service3:
    container_name: "validation-service3"
    build:
      context: ValidationService
      dockerfile: Dockerfile
    ports:
      - "8082:8080"
    networks:
      - hunters-game-network
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      - SERVICE_ID=3

  hazelcast1:
      image: hazelcast/hazelcast
      networks:
        - hunters-game-network

  hazelcast2:
    image: hazelcast/hazelcast
    networks:
      - hunters-game-network

  hazelcast3:
    image: hazelcast/hazelcast
    networks:
      - hunters-game-network

  mc:
    image: hazelcast/management-center
    networks:
      - hunters-game-network
    ports:
      - "8090:8080"

  consul:
    build:
      context: ../consul
      dockerfile: Dockerfile
    networks:
      - hunters-game-network
    ports:
      - "8500:8500"
      - "8600:8600/udp"
      - "8600:8600/tcp"
    volumes:
      - ./consul/server.json:/consul/config/server1.json:ro
    command: "agent -bootstrap-expect=1"

  postgresql:
    container_name: "postgresql"
    image: postgres:latest
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: users
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "users"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - hunters-game-network
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql


  pgadmin:
    image: dpage/pgadmin4:latest
    restart: always
    ports:
      - "82:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    depends_on:
      - postgresql
    links:
      - postgresql
    networks:
      - hunters-game-network
    volumes:
      - pgadmin-data:/var/lib/pgadmin


networks:
  hunters-game-network:
    name: "hunters-game-network"


volumes:
 pgadmin-data:
